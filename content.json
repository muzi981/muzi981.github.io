{"pages":[{"title":"about","text":"","link":"/about/index.html"},{"title":"archives","text":"","link":"/archives/index.html"},{"title":"gyt","text":"","link":"/gyt/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"wdxm","text":"","link":"/wdxm/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"biji","text":"","link":"/biji/index.html"}],"posts":[{"title":"","text":"1.pwd查看当前所在目录2.a.txt./a.txt 当前目录下的a.txt 如：touch ./a.txt 可以直接创建一个a.txt文件，同时在 ls a.txt，下面就会返回一个a.txt，说明找到一个a.txt文件 ../a.txt 上一级目录下的a.txt文件 .a.txt 表示就是a.txt文件，只不过前面带 . 表示该文件为隐藏文件 如touch .a.txt 在ls查找，该隐藏文件是无法被查询的。 总结： Linux下所有文件和目录都是区分大小写； 文件或者目录以 . 开头，代表隐藏文件； ./ 代表：当前目录下； ../ 代表：上一级目录下； ls [目录名] ls后面没有目录名，表示显示目录下，除隐藏文件外的其他文件和目录； ls后面有目录名，表示显示指定目录名下的内容； 123456789101112#显示当前目录内容；lsls ./#显示当前目录子目录内容；ls abcls ./abc #这个写法，表示ls 当前目录下abc子目录；#显示根目录内容；ls /#显示根目录下bin目录内容ls /bin#显示上一级目录内容；ls ../abc1 #可以不加斜杠， 3.ls 显示文件 ls-a：表示显示当前目录下的所有文件，包括隐藏文件； ls -l：表示通过列表的方式展现，同时是通过文件大小用字节来表示； ls -hl：也是通过列表的方式来展现，不同的是，文件大小展示，而是通过不同的方式展示，可能是字节也可能是其他km mb；（主要是通过人性化来展示）； 注： -a：显示所有文件，包括隐藏文件； -l：显示文件或者目录的详细详细，同时以；列表展现； -hl：h是配合l使用，显示文件大小时候，用人性化方式展现； 12345678910#显示所有文件，包括隐藏文件；ls -a#显示详细信息，通过列表展现；ls -l#显示详细信息，文件大小用人性化方式显示；ls -hl#显示所有文件的详细信息；ls -al#显示所有文件的详细信息，同时用人性化方法显示；ls -ahl 通过ls -l返回的信息如下： rw- rw- r– 1 Python Python 4096 8月 29 09:20 a.txtdrwx rwx r-x 2 Python Python 4096 8月 26 06:31 abs 文件存取说明：目录 拥有者权限 组权限 其他用户权限 - r w - r w - r - - d r w x r w x r w x 文件类型：d：目录 -：文件 l：链接文件；文件存取控制：r：可读 w：可写 x：可执行 -：不可执行；硬链接数：文件被硬链接次数；文件属主：文件拥有者所属用户 每个目录或者文件一定会属于一个用户和一个组；且用户和组可以是相同名字的；文件大小：文件修改时间：文件或目录名： 4.ls集合通配符*代表任意多个字符 123456#查看以a结尾的文件，或者目录的内容ls *a#查看以a开头的文件，或者目录内容ls a*#查看只要名字中有a的ls *a* ？代表任意一个字符 123456#a开头，后面任意一个字符ls a?#开始有一个任意字符，后面a结尾ls ?a#查看只有二个字符的文件或者目录ls ?? []代表范围 123456#a或者b或者c开头，后面任意，的文件或者目录ls [a,b,c]*#a到f任意一个开头的，后面任意 ，的文件或者目录ls [a-f]*#只要名字中有a到f的任意字符，的文件或者目录ls *[a-f]* 字符 定义 ^ 指向一行的开头 $ 指向一行的结尾 . 任意单个字符 [] 字符范围。如[a-z] ? 最多一次 * 必须匹配0次或多次 + 必须匹配1次或多次 {n} 必须匹配n次 {n,} 必须匹配n次或以上 {n,m} 匹配次数在n到m之间，包括边界 5.chmod修改文件读取权限和用户对文件的权限；chmod修改文件读取权限：就是设置上面文件的存取控制权限 修改文件读取权限； u：user文件所属用户权限修改；（就是这个文件本身属于哪个用户，现在对这个所属者权限修改）。 g：group文件所属组权限修改； o：other其它用户访问该文件的权限修改； a：all设置所有权限，可以同时设定 所有者用户 组权限 其他用户权限； +：赋权，给文件目录添加权限 -：去权，给文件目录去除权限 =：等号后面有的就直接赋权，没有就直接去权 12345678#给文件a.txt赋予文件所有者权限，也就是用户本人权限；chmod u+r a.txt#给文件a.txt去除文件所有者权限，也就是用户本人权限；chmod u-r a.txt#给文件a.txt 同时进行 用户 组 其他用户 修改权限（也就是，同时对这三个权限修改）；chmod a-rwx a.txt#只保留r，去掉wxchmod o=r a.txt 6.数字法_修改权限chmod[选项] 777 文件目录 用数字表达的权限如下：拥有者权限 组权限 其他用户权限r w x r w x r w x4 2 1 4 2 1 4 2 1 常见权限数字组合： 123456#所有用户所有权限；777 ===&gt;u+rwx ，g+rwx ，o+rwx;#拥有者权限rwx ，组权限rx ，其它用户权限rx755 ===&gt;u+rwx ，g+rx ， o+rx;#拥有者权限rw，组权限r，1其它用户r644 ===&gt;u+rw , g+r ,o+r; 7.cd 访问指定目录cd 目录名：进入指定的目录 cd ：切换到当前用户所在的主目录下，（不管在什么位置，只要cd，就可以回到用户的主目录下）； cd ~：该命令与cd所执行指令一样；回到当前用户的主目录下； cd ..：返回上级目录； cd -：回到切换之前的目录； 用绝对路径和相对路径 绝对路径：从根目录开始； 相对路径：从当前目录开始； 12345678#进入当前目录下的子目录abccd abc#进入根目录下的abccd /abc#回到用户主目录cd#回到上一级目录的上一级目录cd ../.. 8.touch创建和删除文件的操作；touch 创建空文件或者更改文件最后修改日期touch 文件或者目录名如果需要修改一个文件或者目录的最后修改时间，我们就touch 文件或目录名，（前提是该文件或目录是存在的否则touch直接创建一个新文件）； #创建一个新文件，如果b.txt该文件存在，那就直接修改该文件的最后修改时间；touch b.txt 9.mkdir创建目录mkdir 目录名mkdir -p 目录/目录/目录 注：-p：为创建一个嵌套关系的多级目录 1234#创建一个没了aaamkdir aaa#创建一个有嵌套关系的多级目录，创建a目录，在a中创建b，在b中创建cmkdir -p a/b/c 10.rm删除文件或者目录rm 文件rm -r 目录当文件或者目录不存在的时候，rm删除文件或者目录时就会报错所以 -f：就是对如果不存在的文件或者目录，rm删除时，不提示报错 12#删除abc目录，即使abc目录不存在也不报错rm -rf abc #注：添加f后，如果没有abc这个目录后，也不会提示报错，如果有abc目录直接就删除； 11.cp拷贝(复制) mv移动cp文件复制（拷贝）cp 原文件 目标文件 cp：复制文件； -r：复制目录； -i：如果复制的文件已经在目录里面存在了，就就添加 i 属性，这时就会给用户提示，是否需要覆盖该文件或目录； mv 原文件 目标文件 mv和cp参数值基本一致； mv与cp区别就是，cp之后的原文件还存在，mv之后的原文件不存在了； 123456#把当前目录下的a.txt拷贝到abc目录下cp a.txt abc/a.txt#把abc目录下的a.txt文件拷贝到 当前目录下cp abc/a.txt a.txt#复制拷贝当前目录下的ccc目录到abc目录下cp -r ccc abc/ccc 12.cat查看文件内容cat 文件名cat 文件名：该命令主要就是查看某个文件的内容 12345678#查看a.txt内容cat a.txt#/proc目录下存放一些和系统相关的文件cd /proc#查看Linux版本cat version#查看CPU信息cat cpuinfo 13.more 分屏查看文件内容more 文件名 按 空格 向下翻页； 按 B键 回翻一页； 按 Q键 退出； 12#在/proc目录下显示meminfomore meminfo #这时候该文件在命令窗口就显示分页，可以一页一页的看； 14.grep 在指定文件中查找指定内容；grep “字符串” 文件名例：grep “s” muzi.txt12#在meninfo文件中查找是否有字符s的内容；grep &quot;s&quot; meninfo -n：显示行号，查找后，显示查找的文件在哪一行； -v：查找不包括指定内容的行，也就是 grep -v “s” meninfo 就是查找的内容，就是查找不带s的内容； -i：忽略大小写，就是如果查找字符串为小写，加了 -i 后，查找内容同时包括大写； 12grep -n &quot;s&quot; meninfogrep -ni &quot;s&quot; meninfo 字符 定义 ^ 指向一行的开头 $ 指向一行的结尾 . 任意单个字符 [] 字符范围。如[a-z] ? 最多一次 * 必须匹配0次或多次 + 必须匹配1次或多次 {n} 必须匹配n次 {n,} 必须匹配n次或以上 {n,m} 匹配次数在n到m之间，包括边界 **grep正则表达式元字符集（*基本集*） ^ ：锚定行的开始 如：’^grep’匹配所有以grep开头的行。 $ ：锚定行的结束 如：’grep$’匹配所有以grep结尾的行。 . ：匹配一个非换行符的字符 如：’gr.p’匹配gr后接一个任意字符，然后是p。 ***** ：匹配零个或多个先前字符 如：’ *grep’匹配所有0个或多个空格后紧跟grep的行。 **.***一起用代表任意字符。 [] ：匹配一个指定范围内的字符，如’[Gg]rep’匹配Grep和grep。 [^] ：匹配一个不在指定范围内的字符，如：’[^A-FH-Z]rep’匹配不包含A**-F和H-**Z的一个字母开头，紧跟rep的行 ​ : 标记匹配字符，如’lovelove’，love被标记为\\1。备注：即能捕获的分组 *&lt;* ：匹配单词开始的空字符，如**:**’&lt;grep’匹配包含以grep开头的单词的行。 *&gt;* ：匹配单词结束的空字符，如’grep&gt;‘匹配包含以grep结尾的单词的行。 x{m} ：重复字符x，m次，如：’o{5}‘匹配包含5个o的行。 x{m,} ：重复字符x,至少m次，如：’o{5,}‘匹配至少有5个o的行。 x{m,n} ：重复字符x，至少m次，不多于n次，如：’o{5,10}‘匹配5-10个o的行。 \\w ：匹配文字和数字字符，也就是[A-Za-z0-9]，如：’G\\w*p’匹配以G后跟零个或多个文字或数字字符，然后是p。 \\W ：\\w的反置形式，匹配一个或多个非单词字符，如点号句号等。 \\b ：匹配单词边界的空字符，如: ‘\\bgrepb'只匹配grep。 15.echo回显字符串echo 字符串(内容)把echo后面的字符串（内容）回显到屏幕上； 123echo hellohello#这时候在下面就会出现一个hello的字符串，（也就是你后面跟什么内容，他就返回什么内容） 16.clear 清屏12clear#直接clear屏幕就清空了 17.输出重定向（简单来说，就是把执行的结果，不输出到屏幕上，而是直接输出到 a.txt 文件里面） 命令 参数 &gt; 文件名 把一个命令执行的结果不输出到屏幕，而是重定向到一个指定的文件里 如果文件不存在，就创建一个文件来存放该执行结果，如果存在就覆盖该文件 1234#把ls -l 命令执行的结果，放到a.txt里面ls -l &gt; a.txt#把echo命令执行的结果放到a.txt中echo aaa &gt; a.txt 命令 参数 &gt;&gt; 文件名 把一个命令执行的结果不输出到屏幕，而是重定向到一个指定的文件里； 如果文件不存在，就创建一个文件来存放该执行结果，如果存在就直接在文件内部追加新内容，保留原内容； 1234#把ls -l 命令执行的结果，放到a.txt里面,如果a.txt存在就直接在文件内部追加新内容ls -l &gt;&gt; a.txt#把echo命令执行的结果放到a.txt中echo aaa &gt;&gt; a.txt 18.管道符 |管道 的作用 就是把一个命令的输出作为另一个命令的输入； 命令1 | 命令2 命令1 的输出结果作为 命令2 的输入数据 1234#把ls -al的结果作为more的输入，结果就是可以间接实现ls的分屏显示效果ls-al | more #ls -al结果只显示目录(下面通过ls -al 管道 查找以d开头的行)ls -al | grep &quot;^d&quot; 锚定（Anchoring） 插入符号 ^ 和美元符号 $ 是元字符，它们分别匹配行首 和行尾 的空字符串。 练习 回到主目录，ls-al只显示名字以 s 结尾的 目录 1234567#回到主目录，ls-al只显示名字以 s 结尾的 目录cd /ls -al | grep &quot;^d.*s$&quot;#上面命令解释：我们是以 d 开头，然后是以 s 结尾的#所以 d 开头我们添加 ^d;# . 作用就是匹配行首 d 后中间接任意一个字符 后在到行尾 s# s 结尾我们添加 *s$; 字符 定义 ^ 指向一行的开头 $ 指向一行的结尾 . 任意单个字符 [] 字符范围。如[a-z] ? 最多一次 * 必须匹配0次或多次 + 必须匹配1次或多次 {n} 必须匹配n次 {n,} 必须匹配n次或以上 {n,m} 匹配次数在n到m之间，包括边界 19.cat结合重定向可以快速的合并文件 cat 文件1 文件2 文件3 &gt; 文件4 把文件1,2,3中的内容 合并到 文件4中； 123456789101112131415161718192021#步骤：#1.先给 a.txt b.txt c.txt 写入内容#2.cat a.txt b.txt c.txt#3.这时屏幕上就会显示 aaa bbb ccc；#这时个方法，那我们可以把三个内容归结合并到一个文件里面然后统一输出吗，是可以的；echo aaa &gt; a.txtecho bbb &gt; b.txtecho ccc &gt; c.txtcat a.txt b.txt c.txtaaabbbccc#多文件合并 cat 统一输出#1.先cat a.txt b.txt c.txt 就是先访问三个文件的内容，然后重定向到 文件 d.txt中#2.这个我们接着 cat 访问 d.txt文件#3.屏幕上就会打印出 aaa bbb ccc；cat a.txt b.xtxt c.txt &gt; d.txtcat d.txtaaabbbccc 20.find命令-查找文件或者目录； find 开始目录(从哪个目录查找) -name 文件名 1234#从当前目录开始查找 所有子目录 a.txt 文件find ./ -name a.txt#从根目录开始 查找 所有子目录 有没有 a.txt 文件find / -name a.txt 21.ln命令 - 创建一个链接文件（相当于win下的快捷方式） 创建软连接 ln -s 原文件 链接文件 12#给a.txt创建软连接aln -s a.txt a 创建硬链接 ln 原文件 链接文件 12#给a.txt创建硬链接bln a.txt b 软链接文件用 ls -l 显示的时候，第一行标识是 l 硬链接文件用 ls -l 显示的时候，第一行为 - 且 硬链接数会增加，（硬链接数就是前面文件存取控制 后面那个数字 这个数字会随着硬链接数增加而增加）； 软硬链接区别： 软连接不占用磁盘空间，硬链接会占用磁盘空间； 当原文件不存在时候，软链接就没有存在的意义，但是硬链接还是可以正常使用的； 22.Linux权限的含义 r 权限： 对于文件来说，没有 r 权限 ，文件就是不可读； 对于目录来说，没有 r 权限，目录就是不能 ls 看到里面的内容； w权限： 对于文件来说 ，没有 w 权限，文件就是不可 不能再里面添加对象； 对于来说，没有 w 权限，就不能再改目录下创建新的文件或目录； x权限： 对于文件，如果这个文件是可执行的程序，没有 x 权限 ，就不能执行了 对于目录，没有 x 权限，我们就不能再 cd 进入该目录，连cd 都进不去了，这个目录基本上我们也不指望 可读可写 了； 第二节 1.gzip压缩和解压文件 gzip 文件名 压缩指定文件 12gzip a.txt#把a.txt压缩为a.txt.gz,同时a.txt文件不存在 gzip -d 文件名 12gzip -d a.txt.gz#把a.txt.gz解压，解压完后，a.txt.gz就不存在了。 2.zip 和 unzip 压缩和解压 zip 压缩文件.zip 原文件 12zip a.zip a.txt#把a.txt压缩为a.zip，压缩完成之后a.txt还存在； zip -r 压缩目录.zip 原目录 12zip -r a.zip a#把 a 目录压缩成 a.zip，压缩完原目录还存在； unzip 压缩文件.zip 12unzip a.zip#把a.zip文件进行解压，得到a.txt文件； 3.tar 打包文件 选项 说明 c 生成档案，创建打包文件 x 解压档案文件 v 列出归档解档的详细过程，显示进度 f 指定档案文件名称。f 后面一定是 .tar文件，所以必须放在选项最后 t 查看包中内容 tar -cvf 打包文件名 原文件 tar -tvf 需要解压的打包文件(abc.tar) tar -xvf 需要查看的打包文件(abc.tar) 123456tar -cvf abc.tar abc#把abc目录打包为一个abc.tar文件tar -tvf abc.tar#把abc.tar文件解压出来，还原成原本的abc目录tar -xvf abc.tar#这个主要就是查看打包完成的abc.tar里面装了什么内容，主要就是在不解压前提下查看 4.对tar 与 gzip 合用压缩文件 原始的合用方式：打包的文件并不是，直接压缩，在Linux中，对于一个目录的压缩，主要是： 一、我们先 abc目录 打包 为 abc.tar 二、紧接着将打包后的文件压缩，最后就是 abc.tar.gz 123456#打包压缩#第一步先打包；tar -cvf abc.tar abc#第二步在压缩；gzip abc.tar.gz abc.tar#最后我们得到都文件就是abc.tar.gz 采用tar -zcvf实现tar -zcvf 文件名 原文件 1234tar -zcvf abc.tar.gz abc#打包之后同时压缩abc文件tar -zxvf abc.tar .gz#同时解压解包得出abc文件 5.df命令，查看磁盘使用情况 df：直接回车界面就会显示磁盘使用情况 df -h:显示效果更直观； 6.ps命令 ，查看系统进程主要特点缺陷：静态的，不能想win那样 实时动态 ps： ps -a： ps -u： ps -x： ps -aux 或 ps aux： 显示系统中所有进程，并且显示进程的详细信息； 7.top命令 ，查看系统进程，主要通过动态来显示 动态显示进程运行状态 进程即使正在运行的程序 12top#显示动态进程 注意： 退出操作是 按 q 键； 重点关注字段 PID 进程 ID 号:每一个ID号都不重复； USER 运行进程的用户 %CPU 进程 CPU 占有率 %MEM 进程内存占有率 %COMMAND 启动进程的命令名 8.Kill命令 –杀死进程 kill PID kill -9 PID：当kill PID杀不掉的进程 ，那我们就用-9参数，强制删除 对于，杀死进程，只能杀死自己用户的，root用户进程我们无法杀死； 12345#在图形界面下，启动gedit程序，用kill杀死ps -aux | grep 'gedit'#通过管道来，先运行查找进程，通过grep 来查找gedit进程 获取PID。#主要是进程太多不好找，所以我们用grep来查找；kill gedit的PID 9.ping —查看网络是否连通 ping ip或域名 10.ifconfig 查看网卡信息 ifcondig ens33以太网卡名； 硬件地址：网卡物理地址，也叫mac地址； inet地址：ipv4地址； inet6地址：ipv6地址； 第三节：root 用户1.su - 切换用户 su - 用户名 如果不加 - 切换用户是不留当前位置，也就是切换成功后，pwd目录位置还在当前 如果加 - 切换成功直接去 /root 根目录 如果 su - 这个 -后面什么不写，默认切换去root用户 su - 等同于 su - root su 等同于 su root 需要输入密码 注意：在Linux下输入密码是不显示的 退回之前su的用户 exit 其他用户切换root用户是需要，密码的； 当root用户切换到用户目录下，是不用输密码——因为root是超级管理员； 在 su 完之后一定要exit 注销，因为如果不注销，系统中用户就是一直su 一直登陆； 1234567root@ubuntu:~# su - root #第一个是切换到root用户密码： #这里输入root 账户的密码；输入密码是不显示的root@ubuntu:~# pwd #查看当前所在是root目录下/rootroot@ubuntu:~# exit #退出root用户 注销注销muzi@ubuntu:~# #回到当前目录 2.useradd 命令：添加新用户 注意：添加新用户，一般是需要root账户才有添加权限； useradd [选项] [用户名] 选项 -d 指定添加用户主目录 -m 当-d参数指定目录不存在，就自动创建这个目录 12useradd -d /home/admin admin -m#添加一个用户名为admin，主目录是/home/admin，当admin目录不存在时，就自动创建该目录 3.passwd 命令：修改用户密码 passwd 用户名 root 可以改其他用户密码； 其他用户只能修改自己账户密码； 4.增加用户和修改用户的注意 只用root用户才能添加新用户； 普通用户只能修改自己的密码； 5.userdel 命令 删除用户 user [用户名] -f：此选项强制删除用户账号，甚至用户还处于登录状态，也强制删除； -r：用户主目录的文件也随着用户目录一起被删除； 删除用户例子： 1234userdel abc#只是删除用户，但是用完主目录，文件还是保留userdel -r abc#删除用户abc 同时删除abc对应的主目录 6.whoami查看当前登录用户名 whoami 通过这个可以查看当前登录的用户是哪个用户 第四节 vi文本编译器1.vi的使用 第一步：用vi新建一个名为 abc.txt 的文件； vi abc.txt 第二步：进入vi界面后，按 i 键，进入编辑模式； hell word 第三步：按ESC键到命令模式下 第四步：按shift+：到末行模式下 第五步：按wq回车保存退出 完成vi的创建； 2.vi的三种模式下切换 插入模式，编辑模式下： 按ESC会进入命令模式； 命令模式下： i：进入插入模式，光标前 I：行首（大写i就在行首插入） a：进入插入模式，光标后 A：行来（大写a就在行尾插入） shift+: ：进入末行模式； w：存盘 wq：存盘退出； q！：不存盘，强制退出； 末行模式下： 按ESC会进入命令模式； 3.启动vi的三种方式 vi 新文件名 创建一个新文件； vi 已有文件名 打开一个已经存在的文件，在里面开始编辑； vi 这种模式下退出vi时候 w 后面需要加一个文件名，表示先命名才能保存； 4.vi的三种退出方式 在命令模式下shift+：回到末行模式下 在末行模式下 wq 保存并退出 q！ 不不存退出 q 如果文件没有修改用q退出，如果文件内容变化，无法使用q退出 5.用vi编辑一个文件，让这个文件可执行 第一步，用vi创建一个名字叫a 在a文件中输入一个Linux命令 cat /proc/cpuinfo 保存退出vi后，给a文件添加可执行的权限 chmod a+x a 执行a ./a 在前面加./ 主要是因为Linux不会再当前目录下查找可执行文件（所以我们修改配置） 修改Linux的配置文件，使其可以在当前目录下查找可执行文件 回到用户的主目录 cd 在主目录下用vi编辑一个文件.profile vi .profile 在 .profile文件最后一行添加 export PATH=$PATH:. 保存退出 让修改立刻生效 source .profile 生效之后就可以执行a 文件了； 6.vi命令模式下的常用命令 从命令模式进入输入模式 i：在光标当前位置插入 a：在光标后面插入 I：在光标坐在行行首插入 A：在光标所在行行尾插入 o：在光标所在行的下边开启一个新行 O：在光标所在行上边开启一个新行 从命令模式进入末行模式 shift+： 删除： x：删除光标所在位置的字符 dd：删除光标所在行的字符 n dd：n代表数字（指定行数）删除指定数量的行 撤销命令： u：命令窗口下（撤销） ctrl+r：反撤销； 赋值粘贴： yy：赋值当前行 n yy：赋值n 行 p：粘贴 查找： /：查找指定 n：向下查找 N：向上查找 定位到指定行： nG 20G 跳转到20行 G 直接到文件末尾 7.tail 命令 用于查看文件内容，-f用于查看正在改变的日志文件tail [参数] [文件] 参数: -f 循环读取; -q 不显示处理信息; -v 显示详细的处理信息; -c&lt;数目&gt; 显示的字节数; -n&lt;行数&gt; 显示文件的尾部 n 行内容; –pid=PID 与-f合用,表示在进程ID,PID死掉之后结束 -q, –quiet, –silent 从不输出给出文件名的首部 -s, –sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒 实例： 要显示notes.log文件最后10行，请输入一下命令： 1tail notes.log # 默认显示最后 10 行 要跟踪名为 notes.log 的文件的增长情况，请输入以下命令： 1tail -f notes.log","link":"/2018/11/11/Linux%E7%AC%94%E8%AE%B0/"}],"tags":[],"categories":[]}